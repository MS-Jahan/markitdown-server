import os
import subprocess
import tempfile
from flask import Flask, request, abort

# Initialize the Flask web application
app = Flask(__name__)

@app.route('/', methods=['GET'])
def health_check():
    """A simple health check endpoint for Coolify."""
    return "Markitdown server is running.", 200

@app.route('/convert', methods=['POST'])
def convert_file():
    """
    This endpoint accepts a file upload, processes it with the
    markitdown CLI, and returns the converted Markdown content.
    """
    # Verify that a file was included in the request
    if 'file' not in request.files:
        abort(400, 'No file part was found in the request.')

    uploaded_file = request.files['file']

    # Verify that a file was selected
    if uploaded_file.filename == '':
        abort(400, 'No file was selected for uploading.')

    # Proceed if the file is valid
    if uploaded_file:
        # Create a temporary directory that cleans itself up automatically
        with tempfile.TemporaryDirectory() as temp_dir:
            # Define the full paths for the input and output files
            input_path = os.path.join(temp_dir, uploaded_file.filename)
            output_path = os.path.join(temp_dir, "output.md")

            # Save the uploaded file to the temporary directory
            uploaded_file.save(input_path)

            # Construct the command to execute the markitdown CLI tool.
            # We specify the input file and the desired output file.
            command = [
                "markitdown",
                input_path,
                "-o",
                output_path
            ]

            try:
                # Execute the markitdown command
                subprocess.run(
                    command,
                    check=True,        # Throws an exception if the command returns a non-zero exit code
                    capture_output=True, # Captures stdout and stderr
                    text=True          # Decodes stdout/stderr as UTF-8
                )

                # Read the content of the generated Markdown file
                with open(output_path, 'r', encoding='utf-8') as f:
                    markdown_content = f.read()

                # Return the Markdown content as the response
                return markdown_content, 200, {'Content-Type': 'text/markdown; charset=utf-8'}

            except subprocess.CalledProcessError as e:
                # If the command fails, return a detailed error message for debugging
                error_details = f"Markitdown CLI execution failed:\nSTDERR:\n{e.stderr}"
                abort(500, error_details)
            except FileNotFoundError:
                # If the output file isn't created for some reason
                abort(500, "The output file was not generated by the markitdown process.")
    
    # Fallback for any other issues
    abort(400, "An invalid file was provided.")

if __name__ == "__main__":
    # Start the Flask server
    # It will listen on all network interfaces on port 8080
    app.run(host='0.0.0.0', port=8080)
